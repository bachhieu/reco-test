/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 14:19:49 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 14:19:49 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package dao

import (
	"sync"

	"github.com/bachhieu/fountain/baselib/redis_client"
	"github.com/bachhieu/fountain/baselib/sql_client"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/test/biz/dal/dao/postgres_dao"
	"github.com/bachhieu/test/biz/dal/dao/redis_dao"
)

const (
	TEST_CACHE     = "test-cache"
	TEST_DB_MASTER = "test-master"
	TEST_STORAGE   = "test-storage"
)

// ----------------------- PostgresSQL ------------------------
type PostgresDAOList struct {
	usersDAO    *postgres_dao.UsersDAO
	catesDAO    *postgres_dao.CatesDAO
	productsDAO *postgres_dao.ProductsDAO
}
type PostgresDAOManager struct {
	daoListMap map[string]*PostgresDAOList
}

var postgresDAOManager = &PostgresDAOManager{make(map[string]*PostgresDAOList)}

// InstallPostgresDAOManager func
func InstallPostgresDAOManager(clients sync.Map) { /*map[string]*sql_client.SQLClient*/
	clients.Range(func(key, value interface{}) bool {
		k, _ := key.(string)
		v, _ := value.(*sql_client.Client)
		daoList := &PostgresDAOList{}
		_ = v
		daoList.usersDAO = postgres_dao.NewUsersDAO(v.DB)
		daoList.catesDAO = postgres_dao.NewCatesDAO(v.DB)
		daoList.productsDAO = postgres_dao.NewProductsDAO(v.DB)
		postgresDAOManager.daoListMap[k] = daoList
		return true
	})
}

// GetPostgresDAOListMap func
func GetPostgresDAOListMap() map[string]*PostgresDAOList {
	return postgresDAOManager.daoListMap
}
func GetProductsDAO(dbName string) *postgres_dao.ProductsDAO {
	daoList, ok := postgresDAOManager.daoListMap[dbName]
	if !ok {
		v_log.V(1).Infof("GetProductsDAO - Not found daoList: %s", dbName)
	}
	return daoList.productsDAO
}
func GetCatesDAO(dbName string) *postgres_dao.CatesDAO {
	daoList, ok := postgresDAOManager.daoListMap[dbName]
	if !ok {
		v_log.V(1).Infof("GetCatesDAO - Not found daoList: %s", dbName)
	}
	return daoList.catesDAO
}
func GetUsersDAO(dbName string) *postgres_dao.UsersDAO {
	daoList, ok := postgresDAOManager.daoListMap[dbName]
	if !ok {
		v_log.V(1).Infof("GetUsersDAO - Not found daoList: %s", dbName)
	}
	return daoList.usersDAO
}

// ----------------------- Redis ------------------------
// RedisDAOList type
type RedisDAOList struct {
	UsersCache    *redis_dao.UsersCache
	CatesCache    *redis_dao.CatesCache
	ProductsCache *redis_dao.ProductsCache
}

// RedisDAOManager type
type RedisDAOManager struct {
	daoListMap map[string]*RedisDAOList
}

var redisDAOManager = &RedisDAOManager{make(map[string]*RedisDAOList)}

// InstallRedisDAOManager type
func InstallRedisDAOManager(clients map[string]*redis_client.Pool) {
	for k, v := range clients {
		_ = v
		daoList := &RedisDAOList{}
		redisDAOManager.daoListMap[k] = daoList
	}
}

// GetRedisDAOList type
func GetRedisDAOList(redisName string) (daoList *RedisDAOList) {
	daoList, ok := redisDAOManager.daoListMap[redisName]
	if !ok {
		v_log.V(1).Infof("GetRedisDAOList - Not found daoList: %s", redisName)
	}
	return daoList
}

// GetRedisDAOListMap type
func GetRedisDAOListMap() map[string]*RedisDAOList {
	return redisDAOManager.daoListMap
}
func GetUsersCache(redisName string) *redis_dao.UsersCache {
	daoList, ok := redisDAOManager.daoListMap[redisName]
	if !ok {
		v_log.V(1).Infof("GetUsersCache - Not found daoList: %s", redisName)
	}
	return daoList.UsersCache
}
func GetCatesCache(redisName string) *redis_dao.CatesCache {
	daoList, ok := redisDAOManager.daoListMap[redisName]
	if !ok {
		v_log.V(1).Infof("GetCatesCache - Not found daoList: %s", redisName)
	}
	return daoList.CatesCache
}
func GetProductsCache(redisName string) *redis_dao.ProductsCache {
	daoList, ok := redisDAOManager.daoListMap[redisName]
	if !ok {
		v_log.V(1).Infof("GetProductsCache - Not found daoList: %s", redisName)
	}
	return daoList.ProductsCache
}
