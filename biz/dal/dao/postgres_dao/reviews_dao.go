/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 16:48:23 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 16:48:23 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package postgres_dao

import (
	"strings"

	sq "github.com/Masterminds/squirrel"

	"github.com/bachhieu/fountain/baselib/sql_client"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/test/biz/dal/do/review_do"
	"github.com/bachhieu/test/biz/dal/models"
	"github.com/jmoiron/sqlx"
)

var (
	reviews_table  = "reviews"
	reviews_fields = []string{
		"id", "product_id", "user_id", "rating", "comment", "created_time", "updated_time",
	}
)

func reviewsToMap(record *models.ReviewMD) map[string]interface{} {
	return map[string]interface{}{
		"id":           record.ID,
		"product_id":   record.ProductID,
		"user_id":      record.UserID,
		"rating":       record.Rating,
		"comment":      record.Comment,
		"created_time": record.CreatedTime,
		"updated_time": record.UpdatedTime,
	}
}

type ReviewsDAO struct {
	*sqlx.DB
}

func NewReviewsDAO(DB *sqlx.DB) *ReviewsDAO {
	return &ReviewsDAO{DB}
}

func (dao *ReviewsDAO) Insert(record *models.ReviewMD, opts ...Option) error {
	builder := sq.Insert(reviews_table).SetMap(reviewsToMap(record))

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Insert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Insert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ReviewsDAO) BatchInsert(records []*models.ReviewMD, opts ...Option) error {
	builder := sq.Insert(reviews_table).
		Columns(reviews_fields...)
	for _, record := range records {
		builder = builder.SetMap(reviewsToMap(record))
	}

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::BatchInsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	if _, err := ExecWithTx(dao.DB, opts, sqlQuery, args...); err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::BatchInsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ReviewsDAO) BatchUpsert(records []*models.ReviewMD, opts ...Option) error {
	builder := sq.Insert(reviews_table).
		Columns(reviews_fields...)

	for _, record := range records {
		builder = builder.Values(
			record.ID,
			record.ProductID,
			record.UserID,
			record.Rating,
			record.Comment,
			record.CreatedTime,
			record.UpdatedTime,
		)
	}

	//TODO: Sửa lại ON CONFLICT sẽ dựa trên các trường cần thiết
	builder = builder.Suffix(`ON CONFLICT (id) DO UPDATE SET
		product_id = EXCLUDED.product_id,
		user_id = EXCLUDED.user_id,
		rating = EXCLUDED.rating,
		comment = EXCLUDED.comment,
		created_time = EXCLUDED.created_time,
		updated_time = EXCLUDED.updated_time`)

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::BatchUpsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	if _, err := ExecWithTx(dao.DB, opts, sqlQuery, args...); err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::BatchUpsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ReviewsDAO) Upsert(record *models.ReviewMD, opts ...Option) error {
	builder := sq.Insert(reviews_table).SetMap(reviewsToMap(record)).
		Suffix(`ON CONFLICT (id) DO UPDATE SET
		product_id = EXCLUDED.product_id,
		user_id = EXCLUDED.user_id,
		rating = EXCLUDED.rating,
		comment = EXCLUDED.comment,
		created_time = EXCLUDED.created_time,
		updated_time = EXCLUDED.updated_time`)

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Upsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Upsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ReviewsDAO) Get(id string, opts ...Option) *models.ReviewMD {
	queryBuilder := sq.Select(reviews_fields...).
		From(reviews_table).
		Where(sq.Eq{"id": id})

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Get - Lỗi xây dựng truy vấn: %+v", err)
		return nil
	}

	do, err := sql_client.QueryDataParser[models.ReviewMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Get - Lỗi thực thi truy vấn: %+v", err)
		return nil
	}

	return do
}

func (dao *ReviewsDAO) GetMany(ids []string, opts ...Option) ([]*models.ReviewMD, error) {
	queryBuilder := sq.Select(reviews_fields...).
		From(reviews_table).
		Where(sq.Eq{"id": ids})

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::GetMany - Error building query: %+v", err)
		return nil, err
	}

	res, err := sql_client.QueryListDataParser[models.ReviewMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::GetMany - Error executing query: %+v", err)
		return nil, err
	}

	return res, nil
}

func (dao *ReviewsDAO) GetAll(opts ...Option) []*models.ReviewMD {
	queryBuilder := sq.Select(reviews_fields...).
		From(reviews_table).
		OrderBy("created_time ASC")

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::GetAll - Lỗi xây dựng truy vấn: %+v", err)
		return nil
	}

	res, err := sql_client.QueryListDataParser[models.ReviewMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::GetAll - Lỗi thực thi truy vấn: %+v", err)
		return nil
	}

	return res
}

func (dao *ReviewsDAO) Gets(params *review_do.ReviewQueryParams, offset, limit int, opts ...Option) ([]*models.ReviewMD, error) {
	queryBuilder := sq.Select(reviews_fields...).
		From(reviews_table)

	if params.Q != nil && *params.Q != "" {
		queryBuilder = queryBuilder.Where("LOWER(name) LIKE ?", "%"+strings.ToLower(*params.Q)+"%")
	}

	queryBuilder = queryBuilder.
		OrderBy("created_time ASC").
		Offset(uint64(offset)).
		Limit(uint64(limit))

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Gets - Error building query: %+v", err)
		return nil, err
	}

	res, err := sql_client.QueryListDataParser[models.ReviewMD](dao.DB, query, nil, args...)
	return res, err
}

func (dao *ReviewsDAO) Update(md *models.ReviewMD, opts ...Option) error {
	queryBuilder := sq.Update(reviews_table).
		SetMap(reviewsToMap(md)).
		Where(sq.Eq{"id": md.ID})

	sqlQuery, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Update - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Update - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}
func (dao *ReviewsDAO) Delete(id string, opts ...Option) error {
	builder := sq.Delete(reviews_table).
		Where(sq.Eq{"id": id})

	query, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Delete - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, query, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::Delete - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ReviewsDAO) CountTotal(params *review_do.ReviewQueryParams, opts ...Option) int {
	queryBuilder := sq.Select("COUNT(1)").
		From(reviews_table)

	if params.Q != nil && *params.Q != "" {
		queryBuilder = queryBuilder.Where("LOWER(name) LIKE ?", "%"+strings.ToLower(*params.Q)+"%")
	}

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::CountTotal - Error building query: %+v", err)
		return 0
	}

	var count int
	err = dao.DB.QueryRow(query, args...).Scan(&count)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsDAO::CountTotal - Error executing query: %+v", err)
		return 0
	}

	return count
}
