/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 16:10:50 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 16:10:50 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package postgres_dao

import (
	"strings"

	sq "github.com/Masterminds/squirrel"

	"github.com/bachhieu/fountain/baselib/sql_client"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/test/biz/dal/do/product_do"
	"github.com/bachhieu/test/biz/dal/models"
	"github.com/jmoiron/sqlx"
)

var (
	products_table  = "products"
	products_fields = []string{
		"id", "name", "description", "price", "stock_quantity", "display", "created_by", "created_time", "updated_time",
	}
)

func productsToMap(record *models.ProductMD) map[string]interface{} {
	return map[string]interface{}{
		"id":             record.ID,
		"name":           record.Name,
		"description":    record.Description,
		"price":          record.Price,
		"stock_quantity": record.StockQuantity,
		"display":        record.Display,
		"created_by":     record.CreatedBy,
		"created_time":   record.CreatedTime,
		"updated_time":   record.UpdatedTime,
	}
}

type ProductsDAO struct {
	*sqlx.DB
}

func NewProductsDAO(DB *sqlx.DB) *ProductsDAO {
	return &ProductsDAO{DB}
}

func (dao *ProductsDAO) Insert(record *models.ProductMD, opts ...Option) error {
	builder := sq.Insert(products_table).SetMap(productsToMap(record))

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Insert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Insert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ProductsDAO) BatchInsert(records []*models.ProductMD, opts ...Option) error {
	builder := sq.Insert(products_table).
		Columns(products_fields...)
	for _, record := range records {
		builder = builder.SetMap(productsToMap(record))
	}

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::BatchInsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	if _, err := ExecWithTx(dao.DB, opts, sqlQuery, args...); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::BatchInsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ProductsDAO) BatchUpsert(records []*models.ProductMD, opts ...Option) error {
	builder := sq.Insert(products_table).
		Columns(products_fields...)

	for _, record := range records {
		builder = builder.Values(
			record.ID,
			record.Name,
			record.Description,
			record.Price,
			record.StockQuantity,
			record.Display,
			record.CreatedBy,
			record.CreatedTime,
			record.UpdatedTime,
		)
	}

	//TODO: Sửa lại ON CONFLICT sẽ dựa trên các trường cần thiết
	builder = builder.Suffix(`ON CONFLICT (id) DO UPDATE SET
		name = EXCLUDED.name,
		description = EXCLUDED.description,
		price = EXCLUDED.price,
		stock_quantity = EXCLUDED.stock_quantity,
		display = EXCLUDED.display,
		created_by = EXCLUDED.created_by,
		created_time = EXCLUDED.created_time,
		updated_time = EXCLUDED.updated_time`)

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::BatchUpsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	if _, err := ExecWithTx(dao.DB, opts, sqlQuery, args...); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::BatchUpsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ProductsDAO) Upsert(record *models.ProductMD, opts ...Option) error {
	builder := sq.Insert(products_table).SetMap(productsToMap(record)).
		Suffix(`ON CONFLICT (id) DO UPDATE SET
		name = EXCLUDED.name,
		description = EXCLUDED.description,
		price = EXCLUDED.price,
		stock_quantity = EXCLUDED.stock_quantity,
		display = EXCLUDED.display,
		created_by = EXCLUDED.created_by,
		created_time = EXCLUDED.created_time,
		updated_time = EXCLUDED.updated_time`)

	sqlQuery, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Upsert - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Upsert - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ProductsDAO) Get(id string, opts ...Option) *models.ProductMD {
	queryBuilder := sq.Select(products_fields...).
		From(products_table).
		Where(sq.Eq{"id": id})

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Get - Lỗi xây dựng truy vấn: %+v", err)
		return nil
	}

	do, err := sql_client.QueryDataParser[models.ProductMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Get - Lỗi thực thi truy vấn: %+v", err)
		return nil
	}

	return do
}

func (dao *ProductsDAO) GetMany(ids []string, opts ...Option) ([]*models.ProductMD, error) {
	queryBuilder := sq.Select(products_fields...).
		From(products_table).
		Where(sq.Eq{"id": ids})

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::GetMany - Error building query: %+v", err)
		return nil, err
	}

	res, err := sql_client.QueryListDataParser[models.ProductMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::GetMany - Error executing query: %+v", err)
		return nil, err
	}

	return res, nil
}

func (dao *ProductsDAO) GetAll(opts ...Option) []*models.ProductMD {
	queryBuilder := sq.Select(products_fields...).
		From(products_table).
		OrderBy("created_time ASC")

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::GetAll - Lỗi xây dựng truy vấn: %+v", err)
		return nil
	}

	res, err := sql_client.QueryListDataParser[models.ProductMD](dao.DB, query, nil, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::GetAll - Lỗi thực thi truy vấn: %+v", err)
		return nil
	}

	return res
}

func (dao *ProductsDAO) Gets(params *product_do.ProductQueryParams, offset, limit int, opts ...Option) ([]*models.ProductMD, error) {
	queryBuilder := sq.Select(products_fields...).
		From(products_table)

	if params.Q != nil && *params.Q != "" {
		queryBuilder = queryBuilder.Where("LOWER(name) LIKE ?", "%"+strings.ToLower(*params.Q)+"%")
	}

	queryBuilder = queryBuilder.
		OrderBy("created_time ASC").
		Offset(uint64(offset)).
		Limit(uint64(limit))

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Gets - Error building query: %+v", err)
		return nil, err
	}

	res, err := sql_client.QueryListDataParser[models.ProductMD](dao.DB, query, nil, args...)
	return res, err
}

func (dao *ProductsDAO) Update(md *models.ProductMD, opts ...Option) error {
	queryBuilder := sq.Update(products_table).
		SetMap(productsToMap(md)).
		Where(sq.Eq{"id": md.ID})

	sqlQuery, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Update - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, sqlQuery, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Update - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}
func (dao *ProductsDAO) Delete(id string, opts ...Option) error {
	builder := sq.Delete(products_table).
		Where(sq.Eq{"id": id})

	query, args, err := builder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Delete - Lỗi xây dựng truy vấn: %+v", err)
		return err
	}

	_, err = ExecWithTx(dao.DB, opts, query, args...)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::Delete - Lỗi thực thi truy vấn: %+v", err)
		return err
	}

	return nil
}

func (dao *ProductsDAO) CountTotal(params *product_do.ProductQueryParams, opts ...Option) int {
	queryBuilder := sq.Select("COUNT(1)").
		From(products_table)

	if params.Q != nil && *params.Q != "" {
		queryBuilder = queryBuilder.Where("LOWER(name) LIKE ?", "%"+strings.ToLower(*params.Q)+"%")
	}

	query, args, err := queryBuilder.PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::CountTotal - Error building query: %+v", err)
		return 0
	}

	var count int
	err = dao.DB.QueryRow(query, args...).Scan(&count)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsDAO::CountTotal - Error executing query: %+v", err)
		return 0
	}

	return count
}
