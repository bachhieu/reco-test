/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 14:28:41 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 14:28:41 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package postgres_dao

import (
	"context"
	"database/sql"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/jmoiron/sqlx"
)

// DeletedRecordsMode định nghĩa các chế độ xử lý bản ghi bị xóa
type DeletedRecordsMode int

const (
	// FilterDeleted chỉ lấy các bản ghi chưa bị xóa (mặc định)
	FilterDeleted DeletedRecordsMode = iota
	// IncludeDeleted lấy tất cả bản ghi (cả đã xóa và chưa xóa)
	IncludeDeleted
	// DeletedOnly chỉ lấy các bản ghi đã bị xóa (thùng rác)
	DeletedOnly
)

// Option định nghĩa tùy chọn cho các thao tác DAO
type Option func(*OptionConfig)

// OptionConfig giữ cấu hình cho các hoạt động DAO
type OptionConfig struct {
	Tx                 *sqlx.Tx
	Ctx                context.Context
	SoftDelete         bool
	DeleteTime         int32
	DeletedRecordsMode DeletedRecordsMode
}

// defaultOptionConfig trả về cấu hình tùy chọn mặc định
func defaultOptionConfig() *OptionConfig {
	return &OptionConfig{
		Ctx:                context.Background(),
		DeletedRecordsMode: FilterDeleted,
	}
}

// WithTx thêm transaction vào các hoạt động DAO
func WithTx(tx *sqlx.Tx) Option {
	return func(cfg *OptionConfig) {
		cfg.Tx = tx
	}
}

// WithCtx thêm context vào các hoạt động DAO
func WithCtx(ctx context.Context) Option {
	return func(cfg *OptionConfig) {
		if ctx != nil {
			cfg.Ctx = ctx
		}
	}
}

/* Sử dụng trong các hàm delete */
// ForceHardDelete chỉ định sử dụng hard delete thay vì soft delete
func ForceHardDelete() Option {
	return func(cfg *OptionConfig) {
		cfg.SoftDelete = false
	}
}

// WithSoftDelete chỉ định sử dụng soft delete với thời gian nhất định
func WithSoftDelete(deleteTime int32) Option {
	return func(cfg *OptionConfig) {
		cfg.SoftDelete = true
		cfg.DeleteTime = deleteTime
	}
}

/* Sử dụng trong các hàm get */

// WithDeletedOnly chỉ lấy các bản ghi đã bị xóa (thùng rác)
func WithDeletedOnly() Option {
	return func(cfg *OptionConfig) {
		cfg.DeletedRecordsMode = DeletedOnly
	}
}

// WithIncludeDeleted lấy tất cả bản ghi (cả đã xóa và chưa xóa)
func WithIncludeDeleted() Option {
	return func(cfg *OptionConfig) {
		cfg.DeletedRecordsMode = IncludeDeleted
	}
}

// BeginTx khởi tạo một transaction mới
func BeginTx(client *sqlx.DB) (*sqlx.Tx, error) {
	v_log.V(3).Infof("Begin transaction")
	return client.Beginx()
}

// CommitTx commit một transaction
func CommitTx(tx *sqlx.Tx) error {
	v_log.V(3).Infof("Commit transaction")
	return tx.Commit()
}

// RollbackTx rollback một transaction
func RollbackTx(tx *sqlx.Tx) {
	err := tx.Rollback()
	if err != nil {
		v_log.V(3).Errorf("Error rolling back transaction: %v", err)
		return
	}

	v_log.V(3).Infof("Rollback transaction")
}

// applyOptions áp dụng tất cả các tùy chọn vào cấu hình
func applyOptions(opts []Option) *OptionConfig {
	cfg := defaultOptionConfig()
	for _, opt := range opts {
		opt(cfg)
	}
	return cfg
}

// ExecWithTx thực thi câu lệnh SQL với hoặc không với transaction
func ExecWithTx(dao *sqlx.DB, opts []Option, query string, args ...interface{}) (sql.Result, error) {
	cfg := applyOptions(opts)
	if cfg.Tx != nil {
		return cfg.Tx.ExecContext(cfg.Ctx, query, args...)
	}
	return dao.ExecContext(cfg.Ctx, query, args...)
}

// QueryRowWithTx truy vấn một hàng với hoặc không với transaction
func QueryRowWithTx(dao *sqlx.DB, opts []Option, query string, args ...interface{}) *sql.Row {
	cfg := applyOptions(opts)
	if cfg.Tx != nil {
		return cfg.Tx.QueryRowContext(cfg.Ctx, query, args...)
	}
	return dao.QueryRowContext(cfg.Ctx, query, args...)
}

// QueryxContextWithTx truy vấn nhiều hàng với hoặc không với transaction sử dụng sqlx
func QueryxContextWithTx(dao *sqlx.DB, opts []Option, query string, args ...interface{}) (*sqlx.Rows, error) {
	cfg := applyOptions(opts)
	if cfg.Tx != nil {
		return cfg.Tx.QueryxContext(cfg.Ctx, query, args...)
	}
	return dao.QueryxContext(cfg.Ctx, query, args...)
}

// NamedExecWithTx thực thi câu lệnh SQL có tham số được đặt tên
func NamedExecWithTx(dao *sqlx.DB, opts []Option, query string, arg interface{}) (sql.Result, error) {
	cfg := applyOptions(opts)
	if cfg.Tx != nil {
		return cfg.Tx.NamedExecContext(cfg.Ctx, query, arg)
	}
	return dao.NamedExecContext(cfg.Ctx, query, arg)
}

// CommitTxIfCreated commit transaction nếu nó tồn tại
func CommitTxIfCreated(tx *sqlx.Tx) error {
	if tx != nil {
		return tx.Commit()
	}
	return nil
}

// BeginTxIfNotExists bắt đầu một transaction mới nếu không có transaction nào được cung cấp
func BeginTxIfNotExists(dao *sqlx.DB, opts []Option) (*sqlx.Tx, error) {
	cfg := applyOptions(opts)
	if cfg.Tx != nil {
		return cfg.Tx, nil
	}
	return dao.Beginx()
}

// GetSoftDeleteInfo trả về thông tin về SoftDelete và DeleteTime từ các tùy chọn
func GetSoftDeleteInfo(opts []Option) (bool, int32) {
	// Mặc định là soft delete
	if len(opts) == 0 {
		return true, int32(time.Now().Unix())
	}

	cfg := applyOptions(opts)

	// Nếu là soft delete nhưng không cung cấp deleteTime, sử dụng thời gian hiện tại
	if cfg.SoftDelete && cfg.DeleteTime == 0 {
		return true, int32(time.Now().Unix())
	}

	// Nếu SoftDelete = false, không cần deleteTime
	if !cfg.SoftDelete {
		return false, 0
	}

	return cfg.SoftDelete, cfg.DeleteTime
}

// ApplyDeletedRecordsFilter áp dụng điều kiện lọc dựa trên trạng thái xóa
func ApplyDeletedRecordsFilter(queryBuilder squirrel.SelectBuilder, opts []Option) squirrel.SelectBuilder {
	switch applyOptions(opts).DeletedRecordsMode {
	case DeletedOnly:
		return queryBuilder.Where(squirrel.Gt{"deleted_time": 0})
	case IncludeDeleted:
		// Không thêm điều kiện
		return queryBuilder
	default: // FilterDeleted
		return queryBuilder.Where(squirrel.Eq{"deleted_time": 0})
	}
}

/* Builder pattern */

// OptionBuilder giúp xây dựng các Option một cách linh hoạt
type OptionBuilder struct {
	options []Option
}

// NewOptionBuilder tạo builder mới để xây dựng danh sách các Option
func NewOptionBuilder() *OptionBuilder {
	return &OptionBuilder{
		options: []Option{},
	}
}

// WithTxOption thêm transaction vào builder
func (b *OptionBuilder) WithTxOption(tx *sqlx.Tx) *OptionBuilder {
	if tx != nil {
		b.options = append(b.options, WithTx(tx))
	}
	return b
}

// WithCtxOption thêm context vào builder
func (b *OptionBuilder) WithCtxOption(ctx context.Context) *OptionBuilder {
	if ctx != nil {
		b.options = append(b.options, WithCtx(ctx))
	}
	return b
}

// WithHardDelete chỉ định sử dụng hard delete
func (b *OptionBuilder) WithHardDelete() *OptionBuilder {
	b.options = append(b.options, ForceHardDelete())
	return b
}

// WithSoftDeleteAt chỉ định sử dụng soft delete tại thời điểm cụ thể
func (b *OptionBuilder) WithSoftDeleteAt(timestamp int32) *OptionBuilder {
	b.options = append(b.options, WithSoftDelete(timestamp))
	return b
}

// WithSoftDeleteNow chỉ định sử dụng soft delete với thời gian hiện tại
func (b *OptionBuilder) WithSoftDeleteNow() *OptionBuilder {
	b.options = append(b.options, WithSoftDelete(int32(time.Now().Unix())))
	return b
}

// IncludeDeleted chỉ định lấy tất cả bản ghi (bao gồm cả đã xóa)
func (b *OptionBuilder) IncludeDeleted() *OptionBuilder {
	b.options = append(b.options, WithIncludeDeleted())
	return b
}

// OnlyDeleted chỉ định chỉ lấy các bản ghi đã xóa
func (b *OptionBuilder) OnlyDeleted() *OptionBuilder {
	b.options = append(b.options, WithDeletedOnly())
	return b
}

// Build trả về danh sách các Option đã được xây dựng
func (b *OptionBuilder) Build() []Option {
	return b.options
}

// TransactionExecutor thực thi một hàm trong transaction
type TransactionExecutor struct {
	DB *sqlx.DB
}

// NewTransactionExecutor tạo một đối tượng TransactionExecutor mới
func NewTransactionExecutor(db *sqlx.DB) *TransactionExecutor {
	return &TransactionExecutor{DB: db}
}

// ExecuteInTransaction thực thi một hàm trong transaction
// Nếu hàm trả về lỗi, transaction sẽ được rollback
// Nếu không có lỗi, transaction sẽ được commit
func (e *TransactionExecutor) ExecuteInTransaction(ctx context.Context, fn func(tx *sqlx.Tx) error) error {
	tx, err := e.DB.BeginTxx(ctx, nil)
	if err != nil {
		return err
	}

	defer func() {
		if p := recover(); p != nil {
			_ = tx.Rollback()
			panic(p) // re-throw panic after rollback
		}
	}()

	err = fn(tx)
	if err != nil {
		_ = tx.Rollback()
		return err
	}

	return tx.Commit()
}

// ExecuteInExistingTx thực thi một hàm trong transaction hiện có hoặc tạo transaction mới nếu cần
func (e *TransactionExecutor) ExecuteInExistingTx(ctx context.Context, tx *sqlx.Tx, fn func(tx *sqlx.Tx) error) error {
	if tx != nil {
		// Sử dụng transaction hiện có
		return fn(tx)
	}

	// Tạo transaction mới nếu không có
	return e.ExecuteInTransaction(ctx, fn)
}

// WithTransaction tạo một Option với transaction đã cho và tự động commit nếu không có lỗi
func WithTransaction(tx *sqlx.Tx, autoCommit bool) Option {
	return func(cfg *OptionConfig) {
		cfg.Tx = tx
		// Sử dụng dữ liệu này nếu cần xử lý autoCommit trong tương lai
		_ = autoCommit
	}
}

// WithDeleteAtUnixTimestamp tạo Option để soft delete với timestamp Unix cụ thể
func WithDeleteAtUnixTimestamp(timestamp int32) Option {
	return WithSoftDelete(timestamp)
}

// WithDeleteAtTime tạo Option để soft delete với thời gian Go cụ thể
func WithDeleteAtTime(t time.Time) Option {
	return WithSoftDelete(int32(t.Unix()))
}
