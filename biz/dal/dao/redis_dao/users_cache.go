/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 14:28:41 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 14:28:41 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package redis_dao

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/bachhieu/fountain/baselib/base"
	"github.com/bachhieu/fountain/baselib/redis_client"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/test/biz/dal/models"
)

const (
	KUsersDataFormat = "fountain:users:%s" // id
)

func createUsersDataKey(id string) string {
	return fmt.Sprintf(KUsersDataFormat, id)
}

var UsersCacheInstance *UsersCache

type UsersCache struct {
	client *redis_client.Pool
}

func NewUsersCache(client *redis_client.Pool) *UsersCache {
	if UsersCacheInstance == nil {
		UsersCacheInstance = &UsersCache{client}
	}
	return UsersCacheInstance
}
func (dao *UsersCache) Save(mds ...*models.UserMD) error {
	ctx, cancel := redis_client.CreateDefaultCtx()
	defer cancel()

	conn := dao.client.Get()
	if conn == nil {
		err := fmt.Errorf("can not create connection")
		v_log.V(1).WithError(err).Errorf("UsersCache::SaveUsers - Error: %+v", err)
		return err
	}

	pipeline := conn.Pipeline()
	for _, md := range mds {
		pipeline.Set(ctx, createUsersDataKey(md.ID), base.JSONDebugDataString(md), 24*time.Hour)
	}

	if _, err := pipeline.Exec(ctx); err != nil {
		v_log.V(1).WithError(err).Errorf("UsersCache::SaveUsers - Error: %+v", err)
		return err
	}

	return nil
}

func (dao *UsersCache) Get(id string) *models.UserMD {
	key := createUsersDataKey(id)

	ctx, cancel := redis_client.CreateDefaultCtx()
	defer cancel()

	conn := dao.client.Get()
	if conn == nil {
		err := fmt.Errorf("cannot create connection")
		v_log.V(1).WithError(err).Errorf("UsersCache::GetUsers - Error: %+v", err)
		return nil
	}

	dataJSON := conn.Get(ctx, key).Val()
	if dataJSON != "" {
		var res models.UserMD
		if err := json.Unmarshal([]byte(dataJSON), &res); err != nil {
			v_log.V(1).WithError(err).Errorf("UsersCache::GetUsers - Redis unmarshal error: %+v", err)
			return nil
		}
		return &res
	}

	return nil
}

func (dao *UsersCache) Delete(id string) error {
	key := createUsersDataKey(id)

	ctx, cancel := redis_client.CreateDefaultCtx()
	defer cancel()

	conn := dao.client.Get()
	if conn == nil {
		err := fmt.Errorf("can not create connection")
		v_log.V(1).WithError(err).Errorf("UsersCache::DeleteUsers - Error: %+v", err)
		return err
	}

	return conn.Del(ctx, key).Err()
}
