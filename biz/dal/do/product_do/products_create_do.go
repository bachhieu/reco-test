/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 16:10:50 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 16:10:50 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package product_do

import (
	"crypto/rand"
	"time"

	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/fountain/baselib/v_net/v_api"
	"github.com/bachhieu/fountain/proto/v_proto"
	"github.com/bachhieu/test/biz/dal/models"
	"github.com/oklog/ulid/v2"
)

// enable custom message validate if needed
// var _ validator.ICustomMessage = (*CreateProductReq)(nil)

type CreateProductReq struct {
	ID            string   `json:"-"`
	Name          string   `json:"name" validate:"omitempty,min=1,max=255" example:"Obie Schroeder"`
	Description   string   `json:"description" validate:"omitempty,min=1,max=255" example:"eaque ad est et impedit."`
	Price         float64  `json:"price" validate:"omitempty,min=0" example:"858"`
	StockQuantity int      `json:"stock_quantity" validate:"omitempty,min=0,max=1000000000" example:"55"`
	Display       bool     `json:"display" validate:"omitempty" example:"false"`
	Categories    []string `json:"categories" validate:"required,min=1,dive,required"`
	CreatedBy     string   `json:"-"`
}

func (d *CreateProductReq) Validated() (*models.ProductMD, *v_proto.VolioRpcError) {
	if err := v_api.Validate(d); err != nil {
		v_log.V(1).WithError(err).Errorf("CreateProductReq::Validated - Error: %+v", err)
		return nil, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), err.Error())
	}

	timeNow := int32(time.Now().Unix())

	model := &models.ProductMD{
		ID:            ulid.MustNew(ulid.Now(), rand.Reader).String(),
		Name:          d.Name,
		Description:   d.Description,
		Price:         d.Price,
		StockQuantity: d.StockQuantity,
		Display:       d.Display,
		CreatedBy:     d.CreatedBy,
		CreatedTime:   timeNow,
		UpdatedTime:   timeNow,
	}

	d.ID = model.ID
	return model, nil
}

func (d *CreateProductReq) ParserProductCateMD() []*models.ProductCateMD {
	r := []*models.ProductCateMD{}

	for _, cate := range d.Categories {
		r = append(r, &models.ProductCateMD{ProductID: d.ID, CateID: cate})
	}

	return r
}
