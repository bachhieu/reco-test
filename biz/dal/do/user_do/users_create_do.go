/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 14:28:41 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 14:28:41 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package user_do

import (
	"crypto/rand"
	"time"

	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/fountain/baselib/v_net/v_api"
	"github.com/bachhieu/fountain/proto/v_proto"
	"github.com/bachhieu/test/biz/dal/models"
	"github.com/bachhieu/test/pkg/constant"
	"github.com/oklog/ulid/v2"
	"golang.org/x/crypto/bcrypt"
)

// enable custom message validate if needed
// var _ validator.ICustomMessage = (*CreateUserReq)(nil)

type CreateUserReq struct {
	Username string                `json:"username" validate:"omitempty,min=1,max=255" example:"carroll.myrtle"`
	Email    string                `json:"email" validate:"omitempty,min=1,max=255" example:"leannon.herminia@bxt.com"`
	Password string                `json:"password" validate:"omitempty,min=1,max=255" example:"9HZdzEr.uWct"`
	FullName string                `json:"full_name" validate:"omitempty,min=1,max=255" example:"Mr. Cortez Nicolas II"`
	Role     string                `json:"-"`
	Provider constant.ProviderUser `json:"-"`
}

func (d *CreateUserReq) Validated() (*models.UserMD, *v_proto.VolioRpcError) {
	if err := v_api.Validate(d); err != nil {
		v_log.V(1).WithError(err).Errorf("CreateUserReq::Validated - Error: %+v", err)
		return nil, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), err.Error())
	}

	passwordHash, e := d.hashPassword()
	if e != nil {
		v_log.V(1).WithError(e).Errorf("CreateUserReq::Validated - Error: %+v", e)
		return nil, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), "Can't create User!")
	}

	timeNow := int32(time.Now().Unix())

	model := &models.UserMD{
		ID:           ulid.MustNew(ulid.Now(), rand.Reader).String(),
		Username:     d.Username,
		Email:        d.Email,
		PasswordHash: passwordHash,
		FullName:     d.FullName,
		Role:         d.Role,
		Provider:     d.Provider,
		CreatedTime:  timeNow,
		UpdatedTime:  timeNow,
	}

	return model, nil
}

// Hàm để hash password
func (d *CreateUserReq) hashPassword() (string, error) {
	// bcrypt.GenerateFromPassword tự sinh salt + hash
	bytes, err := bcrypt.GenerateFromPassword([]byte(d.Password), bcrypt.DefaultCost)
	return string(bytes), err
}

// Hàm để verify password khi login
func (d *CreateUserReq) CheckPasswordHash(passwordHash string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(passwordHash), []byte(d.Password))
	return err == nil
}
