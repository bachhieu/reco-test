/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 14:28:41 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 14:28:41 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package user_do

import (
	"github.com/bachhieu/fountain/baselib/auth_token"
	"github.com/bachhieu/test/biz/dal/models"
	"github.com/bachhieu/test/pkg/constant"
)

type Token struct {
	AccessToken  string `json:"accessToken" example:"AccessToken"`
	RefreshToken string `json:"refreshToken" example:"RefreshToken"`
}
type UserResponse struct {
	ID          string                `json:"id" example:"01HFGRZQHPY8JHVRZ7NSRDGVB5"`
	Username    string                `json:"username" example:"carroll.myrtle"`
	Email       string                `json:"email" example:"leannon.herminia@bxt.com"`
	FullName    string                `json:"full_name" example:"Mr. Cortez Nicolas II"`
	Role        string                `json:"role" example:"pjOh1Jty"`
	Provider    constant.ProviderUser `json:"provider" example:"internal"`
	CreatedTime int32                 `json:"created_time" example:"1005708562"`
	UpdatedTime int32                 `json:"updated_time" example:"1005708562"`

	Token *Token `json:"token"`
}

func NewUserResponse(md *models.UserMD) *UserResponse {
	if md == nil {
		return nil
	}

	return &UserResponse{
		ID:          md.ID,
		Username:    md.Username,
		Email:       md.Email,
		FullName:    md.FullName,
		Role:        md.Role,
		Provider:    md.Provider,
		CreatedTime: md.CreatedTime,
		UpdatedTime: md.UpdatedTime,
	}
}

func NewUserResponses(mds []*models.UserMD) []*UserResponse {
	if len(mds) == 0 {
		return nil
	}

	res := make([]*UserResponse, 0, len(mds))
	for _, md := range mds {
		if r := NewUserResponse(md); r != nil {
			res = append(res, r)
		}
	}
	return res
}

func (u *UserResponse) RegisterToken() error {
	jwtToken, err := auth_token.NewToken(u.ID, u.FullName, u.Username, u.Email, 1, "")
	if err != nil {
		return err
	}
	sing := auth_token.GetJWTConfig()
	accessToken, refreshToken, err := auth_token.Sign(jwtToken, sing.SecretKey)

	if err != nil {
		return err
	}

	u.Token = &Token{accessToken, refreshToken}
	return nil
}
