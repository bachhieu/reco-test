/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 15:51:44 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 15:51:44 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package cates

import (
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/fountain/proto/v_proto"
	"github.com/bachhieu/test/biz/core"
	"github.com/bachhieu/test/biz/dal/do/cate_do"
	"github.com/bachhieu/test/biz/dal/models"
)

var _ core.CatesCallback = &CatesController{}

func (ctrl *CatesController) Get(id string) *models.CateMD {
	// // Try get from cache first
	// if data := ctrl.dao.catesCache.Get(id); data != nil {
	// 	return data
	// }

	// Get from dao
	md := ctrl.dao.catesDAO.Get(id)
	if md == nil {
		return nil
	}

	// // Save to cache
	// go func() {
	// 	if err := ctrl.dao.catesCache.Save(md); err != nil {
	// 		v_log.V(1).WithError(err).Errorf("CatesController::Get - Cache Error: %+v", err)
	// 	}
	// }()

	return md
}

func (ctrl *CatesController) Gets(params *cate_do.CateQueryParams, offset, limit int) ([]*models.CateMD, *v_proto.VolioRpcError) {
	res, err := ctrl.dao.catesDAO.Gets(params, offset, limit)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Gets - Error: %+v", err)
		return nil, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), "some thing went wrong")
	}

	return res, nil
}

func (ctrl *CatesController) CountTotal(params *cate_do.CateQueryParams) int {
	return ctrl.dao.catesDAO.CountTotal(params)
}

func (ctrl *CatesController) Create(input *cate_do.CreateCateReq) *v_proto.VolioRpcError {
	md, err := input.Validated()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Create - Error: %+v", err)
		return err
	}

	if err := ctrl.dao.catesDAO.Insert(md); err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Create - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to create")
	}
	return nil
}

func (ctrl *CatesController) Update(input *cate_do.UpdateCateReq) *v_proto.VolioRpcError {
	newMd, err := input.Validated()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Update - Error: %+v", err)
		return err
	}

	oldMd := ctrl.dao.catesDAO.Get(newMd.ID)
	if oldMd == nil {
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_DATA_NOT_FOUND), "Cate not found")
	}

	if err := ctrl.dao.catesDAO.Update(oldMd.AllowedUpdateFields(newMd)); err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Update - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to update")
	}

	// Delete cache
	// if err := ctrl.dao.catesCache.Delete(newMd.ID); err != nil {
	// 	v_log.V(1).WithError(err).Errorf("CatesController::Update - Cache Error: %+v", err)
	// }
	return nil
}

func (ctrl *CatesController) Delete(id string) *v_proto.VolioRpcError {
	// Delete from cache first
	if err := ctrl.dao.catesCache.Delete(id); err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Delete - Cache Error: %+v", err)
	}

	if err := ctrl.dao.catesDAO.Delete(id); err != nil {
		v_log.V(1).WithError(err).Errorf("CatesController::Delete - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to delete")
	}
	return nil
}
