/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 16:10:50 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 16:10:50 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package products

import (
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/fountain/proto/v_proto"
	"github.com/bachhieu/test/biz/core"
	"github.com/bachhieu/test/biz/dal/do/product_do"
	"github.com/bachhieu/test/biz/dal/models"
)

var _ core.ProductsCallback = &ProductsController{}

func (ctrl *ProductsController) Get(id string) *models.ProductMD {
	// Try get from cache first
	if data := ctrl.dao.productsCache.Get(id); data != nil {
		return data
	}

	// Get from dao
	md := ctrl.dao.productsDAO.Get(id)
	if md == nil {
		return nil
	}

	// Save to cache
	go func() {
		if err := ctrl.dao.productsCache.Save(md); err != nil {
			v_log.V(1).WithError(err).Errorf("ProductsController::Get - Cache Error: %+v", err)
		}
	}()

	return md
}

func (ctrl *ProductsController) Gets(params *product_do.ProductQueryParams, offset, limit int) ([]*models.ProductMD, *v_proto.VolioRpcError) {
	res, err := ctrl.dao.productsDAO.Gets(params, offset, limit)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Gets - Error: %+v", err)
		return nil, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), "some thing went wrong")
	}

	return res, nil
}

func (ctrl *ProductsController) CountTotal(params *product_do.ProductQueryParams) int {
	return ctrl.dao.productsDAO.CountTotal(params)
}

func (ctrl *ProductsController) Create(input *product_do.CreateProductReq) *v_proto.VolioRpcError {
	md, err := input.Validated()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Create - Error: %+v", err)
		return err
	}

	if err := ctrl.dao.productsDAO.Insert(md); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Create - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to create")
	}

	// INsert cate product

	input.ID = md.ID
	if err := ctrl.dao.productCateDAO.BatchInsert(input.ParserProductCateMD()); err != nil {
		if e := ctrl.dao.productsDAO.Delete(md.ID); e == nil {
			return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "Can't create product")
		}
	}

	return nil
}

func (ctrl *ProductsController) Update(input *product_do.UpdateProductReq) *v_proto.VolioRpcError {
	newMd, err := input.Validated()
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Update - Error: %+v", err)
		return err
	}

	oldMd := ctrl.dao.productsDAO.Get(newMd.ID)
	if oldMd == nil {
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_DATA_NOT_FOUND), "Product not found")
	}

	if err := ctrl.dao.productsDAO.Update(oldMd.AllowedUpdateFields(newMd)); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Update - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to update")
	}
	// Delete cache
	if err := ctrl.dao.productsCache.Delete(newMd.ID); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Update - Cache Error: %+v", err)
	}
	return nil
}

func (ctrl *ProductsController) Delete(id string) *v_proto.VolioRpcError {
	// Delete from cache first
	if err := ctrl.dao.productsCache.Delete(id); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Delete - Cache Error: %+v", err)
	}

	if err := ctrl.dao.productsDAO.Delete(id); err != nil {
		v_log.V(1).WithError(err).Errorf("ProductsController::Delete - Error: %+v", err)
		return v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_SAVE_DATA), "failed to delete")
	}
	return nil
}
