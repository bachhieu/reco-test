/* !!
 * Code generated by fkit
 * If you need to write additional functions, should create a separate file.
 * File Created: Sunday, 27 April 2025 16:48:24 +07:00
 * Author: VietLD (leduyviet2612@gmail.com)
 * -----
 * Last Modified: Sunday, 27 April 2025 16:48:24 +07:00
 * Modified By: HIEUBV\hieubv
 * -----
 * Copyright 2025. All rights reserved.
 */

package reviews

import (
	"github.com/bachhieu/fountain/baselib/base"
	"github.com/bachhieu/fountain/baselib/v_log"
	"github.com/bachhieu/fountain/baselib/v_net/v_api"
	"github.com/bachhieu/fountain/proto/v_proto"
	"github.com/bachhieu/test/biz/dal/do/review_do"
	"github.com/gofiber/fiber/v2"
)

// @Summary      Get Pagination
// @Description  Get pagination of Review
// @Tags         Review
// @Accept       json
// @Produce      json
// @Param        Authorization  header    string  true  "Insert your access token" default(access_token)
// @Param        query_params              query     review_do.ReviewQueryParams  false  "Query params"
// @Success      200          {object}  v_api.Response[[]review_do.ReviewResponse]
// @Failure      400          {object}  v_proto.VolioRpcError
// @Failure      500          {object}  v_proto.VolioRpcError
// @Router       /admin/reviews/pagination [get]
func (api *ReviewsAPI) GetPagination(ctx *fiber.Ctx) error {
	params := new(review_do.ReviewQueryParams)
	if err := ctx.QueryParser(params); err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsAPI::GetPagination - Parse params error: %+v", err)
		return v_api.WriteError(ctx, v_proto.NewRpcError(int32(v_proto.VolioRpcErrorCodes_BAD_REQUEST), "invalid parameters"))
	}

	offset, limit := v_api.GetQueryOffsetLimit(ctx)
	res, err := api.reviewsController.Gets(params, offset, limit)
	if err != nil {
		v_log.V(1).WithError(err).Errorf("ReviewsAPI::GetPagination - Error: %+v", err)
		return v_api.WriteError(ctx, err)
	}

	total := api.reviewsController.CountTotal(params)

	v_log.V(3).Infof("ReviewsAPI::GetPagination - Reply: %s", base.JSONDebugDataString(res))

	return v_api.WithContext(ctx).WithPaginationByLoadMore(total, offset, limit).WriteSuccess(review_do.NewReviewResponses(res))
}
